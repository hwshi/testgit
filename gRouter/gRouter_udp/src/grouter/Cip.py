# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Cip', [dirname(__file__)])
        except ImportError:
            import _Cip
            return _Cip
        if fp is not None:
            try:
                _mod = imp.load_module('_Cip', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Cip = swig_import_helper()
    del swig_import_helper
else:
    import _Cip
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def getUDPPacketString(*args):
  return _Cip.getUDPPacketString(*args)
getUDPPacketString = _Cip.getUDPPacketString

def getGPacketString(*args):
  return _Cip.getGPacketString(*args)
getGPacketString = _Cip.getGPacketString

def PythonError(*args):
  return _Cip.PythonError(*args)
PythonError = _Cip.PythonError
MAX_IPREVLENGTH_ICMP = _Cip.MAX_IPREVLENGTH_ICMP
class pkt_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pkt_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pkt_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _Cip.pkt_data_t_data_set
    __swig_getmethods__["data"] = _Cip.pkt_data_t_data_get
    if _newclass:data = _swig_property(_Cip.pkt_data_t_data_get, _Cip.pkt_data_t_data_set)
    __swig_getmethods__["header"] = _Cip.pkt_data_t_header_get
    if _newclass:header = _swig_property(_Cip.pkt_data_t_header_get)
    def __init__(self): 
        this = _Cip.new_pkt_data_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Cip.delete_pkt_data_t
    __del__ = lambda self : None;
pkt_data_t_swigregister = _Cip.pkt_data_t_swigregister
pkt_data_t_swigregister(pkt_data_t)
cvar = _Cip.cvar

class pkt_data_t_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pkt_data_t_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pkt_data_t_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dst"] = _Cip.pkt_data_t_header_dst_set
    __swig_getmethods__["dst"] = _Cip.pkt_data_t_header_dst_get
    if _newclass:dst = _swig_property(_Cip.pkt_data_t_header_dst_get, _Cip.pkt_data_t_header_dst_set)
    __swig_setmethods__["src"] = _Cip.pkt_data_t_header_src_set
    __swig_getmethods__["src"] = _Cip.pkt_data_t_header_src_get
    if _newclass:src = _swig_property(_Cip.pkt_data_t_header_src_get, _Cip.pkt_data_t_header_src_set)
    __swig_setmethods__["prot"] = _Cip.pkt_data_t_header_prot_set
    __swig_getmethods__["prot"] = _Cip.pkt_data_t_header_prot_get
    if _newclass:prot = _swig_property(_Cip.pkt_data_t_header_prot_get, _Cip.pkt_data_t_header_prot_set)
    def __init__(self): 
        this = _Cip.new_pkt_data_t_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Cip.delete_pkt_data_t_header
    __del__ = lambda self : None;
pkt_data_t_header_swigregister = _Cip.pkt_data_t_header_swigregister
pkt_data_t_header_swigregister(pkt_data_t_header)

class pkt_frame_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pkt_frame_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pkt_frame_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["src_interface"] = _Cip.pkt_frame_t_src_interface_set
    __swig_getmethods__["src_interface"] = _Cip.pkt_frame_t_src_interface_get
    if _newclass:src_interface = _swig_property(_Cip.pkt_frame_t_src_interface_get, _Cip.pkt_frame_t_src_interface_set)
    __swig_setmethods__["src_ip_addr"] = _Cip.pkt_frame_t_src_ip_addr_set
    __swig_getmethods__["src_ip_addr"] = _Cip.pkt_frame_t_src_ip_addr_get
    if _newclass:src_ip_addr = _swig_property(_Cip.pkt_frame_t_src_ip_addr_get, _Cip.pkt_frame_t_src_ip_addr_set)
    __swig_setmethods__["src_hw_addr"] = _Cip.pkt_frame_t_src_hw_addr_set
    __swig_getmethods__["src_hw_addr"] = _Cip.pkt_frame_t_src_hw_addr_get
    if _newclass:src_hw_addr = _swig_property(_Cip.pkt_frame_t_src_hw_addr_get, _Cip.pkt_frame_t_src_hw_addr_set)
    __swig_setmethods__["dst_interface"] = _Cip.pkt_frame_t_dst_interface_set
    __swig_getmethods__["dst_interface"] = _Cip.pkt_frame_t_dst_interface_get
    if _newclass:dst_interface = _swig_property(_Cip.pkt_frame_t_dst_interface_get, _Cip.pkt_frame_t_dst_interface_set)
    __swig_setmethods__["nxth_ip_addr"] = _Cip.pkt_frame_t_nxth_ip_addr_set
    __swig_getmethods__["nxth_ip_addr"] = _Cip.pkt_frame_t_nxth_ip_addr_get
    if _newclass:nxth_ip_addr = _swig_property(_Cip.pkt_frame_t_nxth_ip_addr_get, _Cip.pkt_frame_t_nxth_ip_addr_set)
    __swig_setmethods__["arp_valid"] = _Cip.pkt_frame_t_arp_valid_set
    __swig_getmethods__["arp_valid"] = _Cip.pkt_frame_t_arp_valid_get
    if _newclass:arp_valid = _swig_property(_Cip.pkt_frame_t_arp_valid_get, _Cip.pkt_frame_t_arp_valid_set)
    __swig_setmethods__["arp_bcast"] = _Cip.pkt_frame_t_arp_bcast_set
    __swig_getmethods__["arp_bcast"] = _Cip.pkt_frame_t_arp_bcast_get
    if _newclass:arp_bcast = _swig_property(_Cip.pkt_frame_t_arp_bcast_get, _Cip.pkt_frame_t_arp_bcast_set)
    def __init__(self): 
        this = _Cip.new_pkt_frame_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Cip.delete_pkt_frame_t
    __del__ = lambda self : None;
pkt_frame_t_swigregister = _Cip.pkt_frame_t_swigregister
pkt_frame_t_swigregister(pkt_frame_t)

class gpacket_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gpacket_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gpacket_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["frame"] = _Cip.gpacket_t_frame_set
    __swig_getmethods__["frame"] = _Cip.gpacket_t_frame_get
    if _newclass:frame = _swig_property(_Cip.gpacket_t_frame_get, _Cip.gpacket_t_frame_set)
    __swig_setmethods__["data"] = _Cip.gpacket_t_data_set
    __swig_getmethods__["data"] = _Cip.gpacket_t_data_get
    if _newclass:data = _swig_property(_Cip.gpacket_t_data_get, _Cip.gpacket_t_data_set)
    def __init__(self): 
        this = _Cip.new_gpacket_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Cip.delete_gpacket_t
    __del__ = lambda self : None;
gpacket_t_swigregister = _Cip.gpacket_t_swigregister
gpacket_t_swigregister(gpacket_t)

class ip_packet_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ip_packet_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ip_packet_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ip_hdr_len"] = _Cip.ip_packet_t_ip_hdr_len_set
    __swig_getmethods__["ip_hdr_len"] = _Cip.ip_packet_t_ip_hdr_len_get
    if _newclass:ip_hdr_len = _swig_property(_Cip.ip_packet_t_ip_hdr_len_get, _Cip.ip_packet_t_ip_hdr_len_set)
    __swig_setmethods__["ip_version"] = _Cip.ip_packet_t_ip_version_set
    __swig_getmethods__["ip_version"] = _Cip.ip_packet_t_ip_version_get
    if _newclass:ip_version = _swig_property(_Cip.ip_packet_t_ip_version_get, _Cip.ip_packet_t_ip_version_set)
    __swig_setmethods__["ip_tos"] = _Cip.ip_packet_t_ip_tos_set
    __swig_getmethods__["ip_tos"] = _Cip.ip_packet_t_ip_tos_get
    if _newclass:ip_tos = _swig_property(_Cip.ip_packet_t_ip_tos_get, _Cip.ip_packet_t_ip_tos_set)
    __swig_setmethods__["ip_pkt_len"] = _Cip.ip_packet_t_ip_pkt_len_set
    __swig_getmethods__["ip_pkt_len"] = _Cip.ip_packet_t_ip_pkt_len_get
    if _newclass:ip_pkt_len = _swig_property(_Cip.ip_packet_t_ip_pkt_len_get, _Cip.ip_packet_t_ip_pkt_len_set)
    __swig_setmethods__["ip_identifier"] = _Cip.ip_packet_t_ip_identifier_set
    __swig_getmethods__["ip_identifier"] = _Cip.ip_packet_t_ip_identifier_get
    if _newclass:ip_identifier = _swig_property(_Cip.ip_packet_t_ip_identifier_get, _Cip.ip_packet_t_ip_identifier_set)
    __swig_setmethods__["ip_frag_off"] = _Cip.ip_packet_t_ip_frag_off_set
    __swig_getmethods__["ip_frag_off"] = _Cip.ip_packet_t_ip_frag_off_get
    if _newclass:ip_frag_off = _swig_property(_Cip.ip_packet_t_ip_frag_off_get, _Cip.ip_packet_t_ip_frag_off_set)
    __swig_setmethods__["ip_ttl"] = _Cip.ip_packet_t_ip_ttl_set
    __swig_getmethods__["ip_ttl"] = _Cip.ip_packet_t_ip_ttl_get
    if _newclass:ip_ttl = _swig_property(_Cip.ip_packet_t_ip_ttl_get, _Cip.ip_packet_t_ip_ttl_set)
    __swig_setmethods__["ip_prot"] = _Cip.ip_packet_t_ip_prot_set
    __swig_getmethods__["ip_prot"] = _Cip.ip_packet_t_ip_prot_get
    if _newclass:ip_prot = _swig_property(_Cip.ip_packet_t_ip_prot_get, _Cip.ip_packet_t_ip_prot_set)
    __swig_setmethods__["ip_cksum"] = _Cip.ip_packet_t_ip_cksum_set
    __swig_getmethods__["ip_cksum"] = _Cip.ip_packet_t_ip_cksum_get
    if _newclass:ip_cksum = _swig_property(_Cip.ip_packet_t_ip_cksum_get, _Cip.ip_packet_t_ip_cksum_set)
    __swig_setmethods__["ip_src"] = _Cip.ip_packet_t_ip_src_set
    __swig_getmethods__["ip_src"] = _Cip.ip_packet_t_ip_src_get
    if _newclass:ip_src = _swig_property(_Cip.ip_packet_t_ip_src_get, _Cip.ip_packet_t_ip_src_set)
    __swig_setmethods__["ip_dst"] = _Cip.ip_packet_t_ip_dst_set
    __swig_getmethods__["ip_dst"] = _Cip.ip_packet_t_ip_dst_get
    if _newclass:ip_dst = _swig_property(_Cip.ip_packet_t_ip_dst_get, _Cip.ip_packet_t_ip_dst_set)
    def __init__(self): 
        this = _Cip.new_ip_packet_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Cip.delete_ip_packet_t
    __del__ = lambda self : None;
ip_packet_t_swigregister = _Cip.ip_packet_t_swigregister
ip_packet_t_swigregister(ip_packet_t)
IP_RF = _Cip.IP_RF
IP_DF = _Cip.IP_DF
IP_MF = _Cip.IP_MF
IP_OFFMASK = _Cip.IP_OFFMASK


def IPOutgoingPacket(*args):
  return _Cip.IPOutgoingPacket(*args)
IPOutgoingPacket = _Cip.IPOutgoingPacket
# This file is compatible with both classic and new-style classes.


